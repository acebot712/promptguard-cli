[package]
name = "promptguard"
version = "1.0.0"
edition = "2021"
authors = ["PromptGuard <hello@promptguard.co>"]
description = "Drop-in LLM security for your applications"
license = "Apache-2.0"
repository = "https://github.com/promptguard/cli"
keywords = ["llm", "security", "openai", "anthropic", "proxy"]
categories = ["command-line-utilities", "development-tools"]

[dependencies]
# CLI framework
clap = { version = "4.5", features = ["derive", "cargo"] }
colored = "2.1"

# AST parsing
tree-sitter = "0.20"
tree-sitter-typescript = "0.20"
tree-sitter-python = "0.20"
tree-sitter-javascript = "0.20"

# HTTP client
reqwest = { version = "0.11", features = ["blocking", "json"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
chrono = { version = "0.4", features = ["serde"] }

# File operations
walkdir = "2.4"
glob = "0.3"

# Utilities
anyhow = "1.0"
thiserror = "1.0"
regex = "1.10"

[dev-dependencies]
tempfile = "3.8"

[lints.rust]
unsafe_code = "forbid"

[lints.clippy]
# Pedantic mode - comprehensive checks (set to lower priority)
pedantic = { level = "warn", priority = -1 }

# Deny these - they catch real bugs and we want zero tolerance
panic = "deny"
exit = "deny"

# Warn on these - should fix eventually but don't block builds
# TODO: Graduate these to deny once codebase is cleaned up
unwrap_used = "warn"
expect_used = "warn"
todo = "warn"
unimplemented = "warn"

# Allow some pedantic lints that are too noisy for now
module_name_repetitions = "allow"
must_use_candidate = "allow"
return_self_not_must_use = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"
missing_docs_in_private_items = "allow"

[profile.release]
opt-level = "z"
lto = true
codegen-units = 1
strip = true
